package com.innouni.yinongbao.activity.knowledge;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.innouni.yinongbao.R;
import com.innouni.yinongbao.adapter.KnowledgeAdapter;
import com.innouni.yinongbao.unit.HttpCode;
import com.innouni.yinongbao.unit.KnowledgeTypeUnit;
import com.innouni.yinongbao.unit.KnowledgeUnit;
import com.innouni.yinongbao.view.PopKnowledgeType;
import com.innouni.yinongbao.view.PopKnowledgeType.OnMyItemClickListener;
import com.innouni.yinongbao.view.PullToRefreshView;
import com.innouni.yinongbao.view.PullToRefreshView.OnHeaderRefreshListener;
import com.innouni.yinongbao.widget.comFunction;

/***
 * 知识库主界面
 * 
 * @author LinYuLing
 * @UpdateDate 2014-09-25
 */
public class KnowledgeActivity extends Activity implements OnClickListener,
		OnItemClickListener, OnHeaderRefreshListener, OnMyItemClickListener {
	/***
	 * 头部返回按钮
	 */
	private RelativeLayout rl_back;
	/***
	 * 头部标题控件
	 */
	private TextView tv_title;
	/***
	 * 菜单按钮
	 */
	private Button btn_menu;
	/***
	 * 搜索框
	 */
	private EditText edt_search;
	/***
	 * tv_tab_left：全部 tv_tab_middle：浏览量 tv_tab_right：回复量
	 */
	private TextView tv_tab_left, tv_tab_middle, tv_tab_right;
	/***
	 * 刷新控件
	 */
	private PullToRefreshView pullview;
	/***
	 * 数据展示列表控件
	 */
	private ListView listView;
	/***
	 * 列表尾部控件
	 */
	private View footView;
	/***
	 * 加载更多控件
	 */
	private TextView tv_more;
	/***
	 * 分类弹出框
	 */
	private PopKnowledgeType popType;

	/***
	 * 初始展示列表数据列表
	 */
	private List<KnowledgeUnit> list_bak;
	/***
	 * 展示数据列表
	 */
	private List<KnowledgeUnit> list_data;
	/***
	 * 知识库分类数据列表
	 */
	private List<KnowledgeTypeUnit> list_type;
	/***
	 * 页数
	 */
	private int pageCount = 1;
	/***
	 * 用来判断是筛选加载还是普通加载 0：表示普通 1：表示筛选 和 加载更多
	 */
	private int getType = 0;
	/***
	 * ordertag（排序方式）typeId (分类ID)
	 */
	private String ordertag = "", typeId = "";

	/***
	 * 用来获取屏幕大小
	 */
	private DisplayMetrics dm;
	/***
	 * 展示列表适配器
	 */
	private KnowledgeAdapter adapter;
	/***
	 * 等待进度框
	 */
	private ProgressDialog pd;

	/***
	 * 获取数据异步
	 */
	private GetDataTask getDataTask;
	/***
	 * 获取分类数据异步
	 */
	private GetTypeTask getTypeTask;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_konwledge_main);
		list_bak = new ArrayList<KnowledgeUnit>();
		list_data = new ArrayList<KnowledgeUnit>();
		list_type = new ArrayList<KnowledgeTypeUnit>();
		dm = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(dm);
		pd = new ProgressDialog(this);
		pd.setIndeterminate(true);
		pd.setCancelable(true);

		initHeader();
		initBodyer();
		getType();
	}

	/***
	 * 初始化头部控件
	 */
	private void initHeader() {
		rl_back = (RelativeLayout) findViewById(R.id.rl_header_back);
		tv_title = (TextView) findViewById(R.id.tv_header_title);

		tv_title.setText(getString(R.string.tv_header_konwledge));
		rl_back.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				finish();
			}
		});
	}

	/***
	 * 初始化布局控件
	 */
	private void initBodyer() {
		btn_menu = (Button) findViewById(R.id.btn_menu);
		edt_search = (EditText) findViewById(R.id.edt_search);
		tv_tab_left = (TextView) findViewById(R.id.tv_tab_left);
		tv_tab_middle = (TextView) findViewById(R.id.tv_tab_middle);
		tv_tab_right = (TextView) findViewById(R.id.tv_tab_right);
		pullview = (PullToRefreshView) findViewById(R.id.pullview);
		listView = (ListView) findViewById(R.id.listview);
		footView = getLayoutInflater().inflate(R.layout.widget_listview_foot,
				null);
		tv_more = (TextView) footView.findViewById(R.id.tv_more);
		tv_more.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				loadMore();
			}
		});
		listView.addFooterView(footView);
		adapter = new KnowledgeAdapter(this, list_bak, dm.widthPixels / 8);
		listView.setAdapter(adapter);

		edt_search.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
		edt_search.setOnEditorActionListener(new OnEditorActionListener() {

			@Override
			public boolean onEditorAction(TextView arg0, int actionId,
					KeyEvent arg2) {
				// TODO Auto-generated method stub
				if (actionId == EditorInfo.IME_ACTION_SEARCH) {
					getType = 1;
					pageCount = 1;
					getData();
				}
				return false;
			}
		});
		
		btn_menu.setOnClickListener(this);
		tv_tab_left.setOnClickListener(this);
		tv_tab_middle.setOnClickListener(this);
		tv_tab_right.setOnClickListener(this);
		pullview.setOnHeaderRefreshListener(this);
		listView.setOnItemClickListener(this);
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (v.getId() == R.id.btn_menu) {
			if (popType != null) {
				popType.showPopupWindow();
			}
		} else {
			checked(v.getId());
			switch (v.getId()) {
			case R.id.tv_tab_left:
				ordertag = "1";
				typeId = "";
				break;
			case R.id.tv_tab_middle:
				ordertag = "2";
				break;
			case R.id.tv_tab_right:
				ordertag = "3";
				break;
			default:
				break;
			}
			pageCount = 1;
			getType = 1;
			getData();
		}
	}

	/***
	 * 知识库列表单项点击事件
	 */
	@Override
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		// TODO Auto-generated method stub

	}

	/***
	 * 分类列表单项点击事件
	 */
	@Override
	public void onMyItemClick(AdapterView<?> arg0, View arg1, int position,
			long arg3) {
		// TODO Auto-generated method stub
		pageCount = 1;
		getType = 1;
		typeId = list_type.get(position).getFid();
		getData();
		popType.showPopupWindow();
	}

	@Override
	public void onHeaderRefresh(PullToRefreshView view) {
		// TODO Auto-generated method stub
		pageCount = 1;
		getType = 0;
		getData();
	}

	/***
	 * 加载更多操作
	 */
	private void loadMore() {
		// TODO Auto-generated method stub
		getType = 1;
		pageCount++;
		getData();
	}

	/***
	 * 获取数据操作
	 */
	private void getData() {
		if (comFunction.isWiFi_3G(this)) {
			if (getDataTask == null) {
				getDataTask = new GetDataTask();
				getDataTask.execute();
			}
		} else {
			comFunction.toastMsg(getString(R.string.toast_net_link), this);
		}
	}

	/***
	 * 获取分类数据操作
	 */
	private void getType() {
		if (comFunction.isWiFi_3G(this)) {
			if (getTypeTask == null) {
				getTypeTask = new GetTypeTask();
				getTypeTask.execute();
			}
		} else {
			comFunction.toastMsg(getString(R.string.toast_net_link), this);
		}
	}

	/***
	 * 判断选中项
	 */
	private void checked(int id) {
		if (id == R.id.tv_tab_left) {
			tv_tab_left.setTextColor(getResources().getColor(R.color.blue));
		} else {
			tv_tab_left.setTextColor(Color.BLACK);
		}
		if (id == R.id.tv_tab_middle) {
			tv_tab_middle.setTextColor(getResources().getColor(R.color.blue));
		} else {
			tv_tab_middle.setTextColor(Color.BLACK);
		}
		if (id == R.id.tv_tab_right) {
			tv_tab_right.setTextColor(getResources().getColor(R.color.blue));
		} else {
			tv_tab_right.setTextColor(Color.BLACK);
		}
	}

	/***
	 * 获取数据异步
	 * 
	 * @author LinYuLing
	 * 
	 */
	private class GetDataTask extends AsyncTask<Void, Void, Void> {
		private JSONObject jobj;
		private JSONObject jobj_data;
		private JSONArray jArray_exper;
		private List<NameValuePair> paramsList;
		/***
		 * 服务器返回类型值 200：成功
		 */
		private String code;
		/***
		 * 服务器返回提示内容值
		 */
		private String message = null;
		/***
		 * 每页数据量
		 */
		private String count;

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			if (pageCount == 1) {
				list_data.clear();
				listView.setVisibility(View.GONE);
			}
			if (getType == 1) {
				pd.show();
			}
			paramsList = new ArrayList<NameValuePair>();
			paramsList.add(new BasicNameValuePair("keyword", edt_search
					.getText().toString().trim()));
			paramsList.add(new BasicNameValuePair("page", pageCount + ""));
			paramsList.add(new BasicNameValuePair("ordertag", ordertag));
			paramsList.add(new BasicNameValuePair("typeId", typeId));
		}

		@Override
		protected Void doInBackground(Void... arg0) {
			// TODO Auto-generated method stub
			String requery = comFunction.getDataFromServer("get_wen_question_list", 
					paramsList, KnowledgeActivity.this);
			System.out.println("requery: " + requery);
			try {
				jobj = new JSONObject(requery);
				if (jobj == null) {
					return null;
				}
				code = jobj.getString("code");
				message = jobj.getString("message");
				if (code.equals(HttpCode.SERVICE_SUCCESS)) {
					jobj_data = new JSONObject(jobj.getString("data"));
					if (jobj_data == null) {
						return null;
					}
					count = jobj_data.getString("count");
					jArray_exper = new JSONArray(jobj_data.getString("list"));
					if (jArray_exper == null) {
						return null;
					}
					KnowledgeUnit unit = null;
					for (int i = 0; i < jArray_exper.length(); i++) {
						unit = new KnowledgeUnit();
						unit.setTid(jArray_exper.getJSONObject(i).getString("tid"));
						unit.setFid(jArray_exper.getJSONObject(i).getString("fid"));
						unit.setAuthor(jArray_exper.getJSONObject(i).getString("author"));
						unit.setTitle(jArray_exper.getJSONObject(i).getString("title"));
						unit.setName(jArray_exper.getJSONObject(i).getString("name"));
						unit.setAddtime(jArray_exper.getJSONObject(i).getString("addtime"));
						unit.setViews(jArray_exper.getJSONObject(i).getString("views"));
						unit.setAvatar(jArray_exper.getJSONObject(i).getString("avatar"));
						unit.setReplies(jArray_exper.getJSONObject(i).getString("replies"));
						unit.setAttachment(jArray_exper.getJSONObject(i).getString("attachment"));
						unit.setType(jArray_exper.getJSONObject(i).getString("type"));
						list_data.add(unit);
					}
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			getDataTask = null;
			if (message != null) {
				if (code.equals(HttpCode.SERVICE_SUCCESS)) {
					adapter.clearList();
					adapter.setList(list_data);
					adapter.notifyDataSetChanged();
					if (comFunction.isNullorSpace(count)) {
						tv_more.setVisibility(View.GONE);
					} else {
						if (Integer.valueOf(count) < 14) {
							tv_more.setVisibility(View.GONE);
						} else {
							tv_more.setVisibility(View.VISIBLE);
						}
					}
					listView.setVisibility(View.VISIBLE);
				} else {
					comFunction.toastMsg(message, KnowledgeActivity.this);
				}
			} else {
				comFunction.toastMsg(getString(R.string.toast_net_link),
						KnowledgeActivity.this);
			}
			pullview.onHeaderRefreshComplete();
			if (pd.isShowing()) {
				pd.dismiss();
			}
			super.onPostExecute(result);
		}

	}

	/***
	 * 获取数据异步
	 * 
	 * @author LinYuLing
	 * 
	 */
	private class GetTypeTask extends AsyncTask<Void, Void, Void> {
		private JSONObject jobj;
		private JSONArray jobj_data;
		private List<NameValuePair> paramsList;
		/***
		 * 服务器返回类型值 200：成功
		 */
		private String code;
		/***
		 * 服务器返回提示内容值
		 */
		private String message = null;
		
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			pd.setMessage(getString(R.string.pd_data_link));
			pd.show();
			paramsList = new ArrayList<NameValuePair>();
		}

		@Override
		protected Void doInBackground(Void... arg0) {
			// TODO Auto-generated method stub
			String requery = comFunction.getDataFromServer("get_wen_menu", 
					paramsList, KnowledgeActivity.this);
			System.out.println("requery: " + requery);
			try {
				jobj = new JSONObject(requery);
				if (jobj == null) {
					return null;
				}
				code = jobj.getString("code");
				message = jobj.getString("message");
				if (code.equals(HttpCode.SERVICE_SUCCESS)) {
					jobj_data = new JSONArray(jobj.getString("data"));
					if (jobj_data == null) {
						return null;
					}
					KnowledgeTypeUnit unit = null;
					for (int i = 0; i < jobj_data.length(); i++) {
						JSONArray jArray_letter = new JSONArray(
								jobj_data.getJSONObject(i).getString("letterlist"));
						for (int j = 0; j < jArray_letter.length(); j++) {
							unit = new KnowledgeTypeUnit();
							unit.setFid(jArray_letter.getJSONObject(j).getString("fid"));
							unit.setName(jArray_letter.getJSONObject(j).getString("name"));
							unit.setLetter(jobj_data.getJSONObject(i).getString("letter"));
							list_type.add(unit);
						}
					}
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			getTypeTask = null;
			if (message != null) {
				if (code.equals(HttpCode.SERVICE_SUCCESS)) {
					popType = new PopKnowledgeType(KnowledgeActivity.this, list_type, btn_menu, 
							dm.widthPixels / 3 * 2, dm.heightPixels / 5 * 4);
					popType.setOnMyItemClickListener(KnowledgeActivity.this);
				} else {
					comFunction.toastMsg(message, KnowledgeActivity.this);
				}
			} else {
				comFunction.toastMsg(getString(R.string.toast_net_link),
						KnowledgeActivity.this);
			}
			tv_tab_left.performClick();
			super.onPostExecute(result);
		}

	}

}
